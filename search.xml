<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用vscode刷leetcode</title>
      <link href="/2023/10/18/%E7%94%A8vscode%E5%88%B7leetcode/"/>
      <url>/2023/10/18/%E7%94%A8vscode%E5%88%B7leetcode/</url>
      
        <content type="html"><![CDATA[<p>想起本科时准备蓝桥杯时，还是本地用devc++调试然后再改代码在leetcode上运行提交，着实小白了。正值快要找实习了，刷题还是需要尽早提上日程，好在现在知道了有更好的工具，我们就尽量用工具，不必被一些有的没的给自己添加麻烦。</p><h1 id="1-下载vscode"><a href="#1-下载vscode" class="headerlink" title="1 下载vscode"></a>1 下载vscode</h1><p>我自己下的已有的就不多赘述了。主要看用什么语言刷题，需要下载对应的扩展，本人还是用的c++，如图。</p><p><img src="/images/image20231018171822020.png" alt="image-20231018171822020"></p><h1 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2 配置环境"></a>2 配置环境</h1><h2 id="2-1-安装MinGW编译器"><a href="#2-1-安装MinGW编译器" class="headerlink" title="2.1 安装MinGW编译器"></a>2.1 安装<a href="https://so.csdn.net/so/search?q=MinGW&spm=1001.2101.3001.7020">MinGW</a>编译器</h2><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/</a></p><p><img src="/images/image20231018172130793.png" alt="image-20231018172130793"></p><p>绿框默认下载的是压缩包，如果想下载运行文件就拖到最后。但是不建议下载exe文件进行安装，不知道为什么我新换的这个电脑屡次安装失败。但是压缩包解压后，并添加环境变量是很顺利的。</p><img src="/images/image20231018172207499.png" alt="image-20231018172207499" style="zoom: 50%;" /><p>下载后打开下载的压缩包所在文件夹，解压到一个包含中文文字的路径目录下，压缩包根据自己心情决定是否删除。如：当然D盘也没问题，只是我的D盘快满了，C盘还很富裕（谁能想到）。</p><img src="/images/image20231018172522710.png" alt="image-20231018172522710" style="zoom: 50%;" /><h2 id="2-2-配置环境变量"><a href="#2-2-配置环境变量" class="headerlink" title="2.2 配置环境变量"></a>2.2 配置环境变量</h2><p>复制上面这个文件夹下bin的路径，如我的：C:\Program Files\mingw64\bin</p><p>在<strong>系统环境变量</strong>中的Path中新建，将复制的路径贴入，确定，确定，确定。</p><p>验证下是否可用，在cmd中键入gcc -v看反没反馈信息。</p><h1 id="3-vscode安装leetcode插件"><a href="#3-vscode安装leetcode插件" class="headerlink" title="3 vscode安装leetcode插件"></a>3 vscode安装leetcode插件</h1><p><img src="/images/image20231018172919486.png" alt="image-20231018172919486"></p><p>成功后左边栏会出现这个图标<img src="/images/image20231018173147429.png" alt="image-20231018173147429" style="zoom:33%;" /></p><h1 id="4-安装nodejs"><a href="#4-安装nodejs" class="headerlink" title="4 安装nodejs"></a>4 安装nodejs</h1><p>我的因为之前编写前端工作，nodejs已有，也不过多赘述。下载安装也比较方便。</p><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p><img src="/images/image20231018173037419.png" alt="image-20231018173037419"></p><p>下载完成后打开，除了安装路径一路next即可。Node.js在安装完成之后会自动配置环境变量，所以我们无需操心，但需要记住安装位置，后边需要使用到。</p><h1 id="5-登录leetcode账号"><a href="#5-登录leetcode账号" class="headerlink" title="5 登录leetcode账号"></a>5 登录leetcode账号</h1><h2 id="5-1-修改站点为中国leetcode"><a href="#5-1-修改站点为中国leetcode" class="headerlink" title="5.1 修改站点为中国leetcode"></a>5.1 修改站点为中国leetcode</h2><img src="/images/image20231018173316871.png" alt="image-20231018173316871" style="zoom:50%;" /><h2 id="5-2-登录账户"><a href="#5-2-登录账户" class="headerlink" title="5.2 登录账户"></a>5.2 登录账户</h2><p>点击sign in to leetcode按钮，输入自己的账号密码即可登录。</p><h2 id="5-3-配置文件路径和nodejs路径"><a href="#5-3-配置文件路径和nodejs路径" class="headerlink" title="5.3 配置文件路径和nodejs路径"></a>5.3 配置文件路径和nodejs路径</h2><p>编程文件都会保存到本地，默认路径为“$HOME.leetcode”，可以自行设置路径。<br>点击扩展按钮，选中LeetCode插件，鼠标右键选择<strong>扩展设置</strong>。<br>找到Node Path（node所在路径）和Workspace Folder（自己想要保存的leetcode编程记录文件地址），选择相应路径。然后就可以开始快乐编程了。</p><h1 id="6-编写"><a href="#6-编写" class="headerlink" title="6 编写"></a>6 编写</h1><p>左边栏会把各种题目进行了分类，点进一个题目，可以看到题目描述，点击右下角的code now就可以编代码了。你发现他的类给你封装好了，不用再从#include<iostream>开始了（狗头）。</p><p><img src="/images/image20231018173704371.png" alt="image-20231018173704371"></p><p>点击test可以测试，测试用例有默认录好的。点击submit就可以提交，提交情况会同步到账号，也就是网页登录都会显示已提交。</p><p><img src="/images/image20231018173847292.png" alt="image-20231018173847292"></p><h1 id="7-调试"><a href="#7-调试" class="headerlink" title="7 调试"></a>7 调试</h1><p>上面的做完其实只有submit和test按钮，那我们用vscode刷题的便捷优势还没有凸显出来。想要调试，还得进行一些配置：</p><p>下载debug leetcode，就完成啦。</p><p><img src="/images/image20231018174746878.png" alt="image-20231018174746878"></p><p><img src="/images/image20231018180114403.png" alt="image-20231018180114403"></p><h1 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h1><p>其实编程语言环境配好基本没什么问题，留意上面都是c++，如果用java，插件还是有一点区别的。</p><p>还遇到一个问题就是，ListNode、cout等关键字爆红，显示为 未定义标识符，这是c++扩展设置的问题。如下方式解决：<br>File-》Preference-》Setting-》Extensions-》C&#x2F;C++<br>“C_Cpp.intelliSenseEngine”: “Default”<br>改为”C_Cpp.intelliSenseEngine”: “Tag Parser”</p><p><img src="/images/image20231017100516252.png" alt="image-20231017100516252"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2023/10/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/10/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>抽出时间来记录下个人博客搭建。通过github page平台上托管博客，hexo作为一个快速简洁的博客框架，用它来搭建博客还挺非常容易得。</p><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。可以进入<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>本文分三个部分，</p><ul><li>第一部分：hexo搭建及部署</li><li>第二部分：更换主题、设置主题</li><li>第三部分：推送文章</li></ul><h1 id="第一部分：搭建"><a href="#第一部分：搭建" class="headerlink" title="第一部分：搭建"></a>第一部分：搭建</h1><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><p><strong>Hexo搭建步骤</strong></p><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h2 id="1-1-安装Hexo"><a href="#1-1-安装Hexo" class="headerlink" title="1.1 安装Hexo"></a>1.1 安装Hexo</h2><p>前两步骤 安装Git、安装Node.js 暂时跳过，电脑已有相应的环境。</p><p>留意一下版本问题，如下是hexo及对应的最低兼容node.js的版本：</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>6.0+</td><td>12.13.0</td></tr><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table><p>首先创建一个文件夹blog，在这个文件夹下右键git bash打开。</p><p>输入命令安装hexo</p><pre><code>npm install -g hexo-cli</code></pre><p>装完可以用<code>hexo -v</code>查看一下版本。</p><p>初始化hexo</p><pre><code>hexo init myblog  </code></pre><p>myblog可以自己取什么名字都行</p><pre><code>cd myblog //进入这个myblog文件夹npm install  //安装依赖</code></pre><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><pre><code>hexo ghexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p><img src="/images/image20231016195803091.png" alt="image-20231016195803091"></p><h2 id="1-2-GitHub创建个人仓库"><a href="#1-2-GitHub创建个人仓库" class="headerlink" title="1.2 GitHub创建个人仓库"></a>1.2 GitHub创建个人仓库</h2><p>在github新建一个仓库。</p><ul><li>新建一个名为: <a href="https://link.zhihu.com/?target=http://username.github.io">http://username.github.io</a> 的仓库(username 为你的 Github 用户名)</li><li>必须是用户名，其它名称无效，将来博客的网站访问地址就是 <a href="https://link.zhihu.com/?target=https://test.github.io/">https://test.github.io</a> 了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><img src="/images/image20231016195945050.png" alt="image20231016195945050" style="zoom: 67%;" /><img src="/images/image20231016200310797.png" alt="image20231016200310797" style="zoom:67%;" /><img src="/images/image20231016200219125.png" alt="image20231016200219125" style="zoom:67%;" /><h2 id="1-3-生成SSH添加到GitHub"><a href="#1-3-生成SSH添加到GitHub" class="headerlink" title="1.3 生成SSH添加到GitHub"></a>1.3 生成SSH添加到GitHub</h2><p>将SSH密钥添加到GitHub是为了通过SSH协议进行安全的身份验证，而不是使用用户名和密码。这提供了更高的安全性，并允许您无需输入密码即可访问和推送GitHub存储库。这对于开发者在与GitHub进行交互时更加方便和安全。</p><p>首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)。</p><p>在 C:\Users\您的用户名 文件夹下右键打开 Git Bash输入命令: <code>ssh-keygen -t rsa -C &quot;你的github登录邮箱&quot;</code> 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功。</p><p><img src="/images/image20231016200749843.png" alt="image-20231016200749843"></p><p>生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p><p>打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p><p><img src="/images/image20231016200853748.png" alt="image-20231016200853748"></p><p>检查一下是否设置成功</p><pre><code>ssh -T git@github.com</code></pre><p>还需要如下配置</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><h2 id="1-4-将hexo部署到GitHub"><a href="#1-4-将hexo部署到GitHub" class="headerlink" title="1.4 将hexo部署到GitHub"></a>1.4 将hexo部署到GitHub</h2><p>在blog目录下安装 hexo-deployer-git 插件</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>编辑blog 目录下的 _config.yml 文件，在文件末尾添加如下内容。翻到最后，修改为 YourgithubName就是你的GitHub账户</p><pre><code>deploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.git  branch: master</code></pre><p>然后通过：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>其中 <code>hexo clean</code>清除了之前生成的东西，也可以不加。 <code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写 <code>hexo deploy</code> 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p><p>推送成功后，即可通过 <a href="https://username.github.io/">https://username.github.io/</a> 访问个人博客了!</p><h1 id="第二部分：主题"><a href="#第二部分：主题" class="headerlink" title="第二部分：主题"></a>第二部分：主题</h1><p>在blog目录下有一个 themes 文件夹，该文件夹下存放着 hexo 所使用的主题.</p><p>hexo 官方提供了很多主题供我们使用，地址: <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a>, 选择喜欢的主题并点击即可跳转至 github</p><p>我使用了butterfly主题。</p><h2 id="2-1-下载主题"><a href="#2-1-下载主题" class="headerlink" title="2.1 下载主题"></a>2.1 下载主题</h2><p>在blog 目录下右键 Git Bash Here</p><p>执行命令: <code>git clone 主题http链接 themes/主题名称</code> 将主题下载至 themes 文件夹下</p><pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre><h2 id="2-2-使用主题"><a href="#2-2-使用主题" class="headerlink" title="2.2 使用主题"></a>2.2 使用主题</h2><p>安装<code>pug</code> 和 <code>stylus</code> 渲染器。</p><pre><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></pre><p>修改项目根目录下的<code>_config.yml</code>文件（称为站点配置文件），开启主题。</p><pre><code>theme: butterfly</code></pre><p>升级建议：</p><p>为了減少升级主题带来的不便，我们可以把主题文件夹中的 <code>_config.yml</code> 重命名为 <code>_config.butterfly.yml</code>，复制到blog根目录下与<code>config.yml</code>同级。</p><p>Hexo会自动合并主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code> ，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。所以像和博客网址相关联的固定资料可以设置在<code>_config.yml</code>中，比如博客的标题、作者信息和邮箱等等资料，而和主题样式相关的配置放在 <code>_config.butterfly.yml</code> 中，那么在将来你想换一个主题是很方便的。</p><h2 id="2-3-设置博客"><a href="#2-3-设置博客" class="headerlink" title="2.3 设置博客"></a>2.3 设置博客</h2><p><strong>设置博客个人资料</strong></p><p>修改根目录下的站点配置文件<code>_config.yml</code>，可以修改网站各种<strong>资料，例如标题、副标题和语言</strong>等个人资料。</p><pre><code># Sitetitle: Capybarato #标题subtitle: &#39;&#39;#副标题description: &#39;不要气馁，我的小太阳&#39;#个性签名keywords:author: GuoJingjing   #作者language: zh-CN  #语言timezone: Asia/Beijing  #中国的时区</code></pre><p><strong>设置导航菜单</strong></p><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><pre><code>menu:  主页: / || fas fa-home  博文 || fa fa-graduation-cap:    分类: /categories/ || fa fa-archive    标签: /tags/ || fa fa-tags    归档: /archives/ || fa fa-folder-open  生活 || fas fa-list:    分享: /shuoshuo/ || fa fa-comments-o    相册: /photos/ || fa fa-camera-retro  友链: /links/ || fa fa-link  留言板: /comment/ || fa fa-paper-plane  #留言板: /messageboard/ || fa fa-paper-plane  关于笔者: /about/ || fas fa-heart  </code></pre><p>效果图：</p><p><strong>代码块显示设置</strong></p><pre><code>highlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / falsehighlight_copy: true # copy buttonhighlight_lang: true # show the code languagehighlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the buttonhighlight_height_limit: false # unit: pxcode_word_wrap: true  #代码自动换行，关闭滚动条</code></pre><p>效果图：</p><p><strong>本地搜索功能</strong>：<br>安装搜索插件</p><pre><code>npm install hexo-generator-search --save</code></pre><p>主题配置文件 <code>_config.butterfly.yml</code>补充：</p><pre><code># Local searchlocal_search:  enable: true  labels:    input_placeholder: Search for Posts    hits_empty: &quot;We didn&#39;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</code></pre><p><strong>创建文件夹</strong></p><p>分类：</p><pre><code>hexo new page categories</code></pre><p>会出现<code>source/categories/index.md</code>文件</p><p>标签</p><pre><code>hexo new page tags</code></pre><p>会出现<code>source/tags/index.md</code>文件</p><p><strong>修改副标题</strong></p><p>修改主题配置文件 <code>_config.butterfly.yml</code>:</p><pre><code># the subtitle on homepage (主頁subtitle)subtitle:  enable: true  # Typewriter Effect (开启打字效果)  effect: true  # loop (循環打字)  loop: true  # source調用第三方服務  # source: false 關閉調用  # source: 1  調用搏天api的隨機語錄（簡體）  # source: 2  調用一言網的一句話（簡體）  # source: 3  調用一句網（簡體）  # source: 4  調用今日詩詞（簡體）  # subtitle 會先顯示 source , 再顯示 sub 的內容  source: false  # 如果有英文逗号&#39; , &#39;,请使用转义字元 &amp;#44;  # 如果有英文双引号&#39; &quot; &#39;,请使用转义字元 &amp;quot;  # 开头不允許转义字元，如需要，请把整個句子用双引号包住  # 如果关闭打字效果，subtitle只会现示sub的第一行文字  sub:</code></pre><p>图片设置</p><p>图片可以用云链接或者本地路径：<code>/themes/butterfly/source/img</code>。修改主题配置文件<code>_config.butterfly.yml</code>：</p><pre><code># Favicon（网站图）favicon: /img/favicon.png</code></pre><p>图像</p><pre><code>avatar:  img: /img/avatar.jpg #图片路径  effect: false #头像会一直转圈  </code></pre><p>主页封面图片</p><pre><code># The banner image of home pageindex_img: /img/background.jpg</code></pre><p>文章详情页的顶部图片</p><h1 id="第三部分：博文"><a href="#第三部分：博文" class="headerlink" title="第三部分：博文"></a>第三部分：博文</h1><h2 id="2-1-使用-Typora-编写博客"><a href="#2-1-使用-Typora-编写博客" class="headerlink" title="2.1 使用 Typora 编写博客"></a>2.1 使用 Typora 编写博客</h2><p>在blog目录下，通过输入命令: <code>hexo new &quot;文章 title&quot;</code> 会在 &#x2F;source 文件夹下生成对应文章的 .md 文件，然后就可以通过 Typora 打开此文件编写文章并保存了</p><p>写完该篇文章后，依次输入以下命令:</p><p><code>hexo clean</code> 删除 public 文件夹，即删除旧的博客文章</p><p><code>hexo g</code> 生成 public 文件夹，即生成新的博客文章相关 html 文件</p><p><code>hexo d</code> 将博客推送到 github</p><h2 id="2-2-插入图片"><a href="#2-2-插入图片" class="headerlink" title="2.2 插入图片"></a>2.2 插入图片</h2><p>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source&#x2F;images 文件夹中，通过 markdown 语法访问它们。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/22/hello-world/"/>
      <url>/2023/08/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
